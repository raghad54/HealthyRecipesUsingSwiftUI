//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 3 storyboards.
  struct storyboard {
    /// Storyboard `GitHubRepoDetailsStoryboard`.
    static let gitHubRepoDetailsStoryboard = _R.storyboard.gitHubRepoDetailsStoryboard()
    /// Storyboard `GitHubRepoListStoryboard`.
    static let gitHubRepoListStoryboard = _R.storyboard.gitHubRepoListStoryboard()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "GitHubRepoDetailsStoryboard", bundle: ...)`
    static func gitHubRepoDetailsStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.gitHubRepoDetailsStoryboard)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "GitHubRepoListStoryboard", bundle: ...)`
    static func gitHubRepoListStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.gitHubRepoListStoryboard)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 6 files.
  struct file {
    /// Resource file `README.md`.
    static let readmeMd = Rswift.FileResource(bundle: R.hostingBundle, name: "README", pathExtension: "md")
    /// Resource file `loading.json`.
    static let loadingJson = Rswift.FileResource(bundle: R.hostingBundle, name: "loading", pathExtension: "json")
    /// Resource file `loading1.json`.
    static let loading1Json = Rswift.FileResource(bundle: R.hostingBundle, name: "loading1", pathExtension: "json")
    /// Resource file `loading2.json`.
    static let loading2Json = Rswift.FileResource(bundle: R.hostingBundle, name: "loading2", pathExtension: "json")
    /// Resource file `loading3.json`.
    static let loading3Json = Rswift.FileResource(bundle: R.hostingBundle, name: "loading3", pathExtension: "json")
    /// Resource file `loading4.json`.
    static let loading4Json = Rswift.FileResource(bundle: R.hostingBundle, name: "loading4", pathExtension: "json")

    /// `bundle.url(forResource: "README", withExtension: "md")`
    static func readmeMd(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.readmeMd
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "loading", withExtension: "json")`
    static func loadingJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.loadingJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "loading1", withExtension: "json")`
    static func loading1Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.loading1Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "loading2", withExtension: "json")`
    static func loading2Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.loading2Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "loading3", withExtension: "json")`
    static func loading3Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.loading3Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "loading4", withExtension: "json")`
    static func loading4Json(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.loading4Json
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    /// Nib `GitHubTableCell`.
    static let gitHubTableCell = _R.nib._GitHubTableCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "GitHubTableCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.gitHubTableCell) instead")
    static func gitHubTableCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.gitHubTableCell)
    }
    #endif

    static func gitHubTableCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GitHubTableCell? {
      return R.nib.gitHubTableCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GitHubTableCell
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib {
    struct _GitHubTableCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "GitHubTableCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GitHubTableCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GitHubTableCell
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try gitHubRepoDetailsStoryboard.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try gitHubRepoListStoryboard.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct gitHubRepoDetailsStoryboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = GitHubRepoDetailsVC

      let bundle = R.hostingBundle
      let gitHubRepoDetailsVC = StoryboardViewControllerResource<GitHubRepoDetailsVC>(identifier: "GitHubRepoDetailsVC")
      let name = "GitHubRepoDetailsStoryboard"

      func gitHubRepoDetailsVC(_: Void = ()) -> GitHubRepoDetailsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: gitHubRepoDetailsVC)
      }

      static func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "backward.frame") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'backward.frame' is used in storyboard 'GitHubRepoDetailsStoryboard', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.gitHubRepoDetailsStoryboard().gitHubRepoDetailsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'gitHubRepoDetailsVC' could not be loaded from storyboard 'GitHubRepoDetailsStoryboard' as 'GitHubRepoDetailsVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct gitHubRepoListStoryboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let gitHubRepoListVC = StoryboardViewControllerResource<GitHubRepoListVC>(identifier: "GitHubRepoListVC")
      let name = "GitHubRepoListStoryboard"

      func gitHubRepoListVC(_: Void = ()) -> GitHubRepoListVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: gitHubRepoListVC)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.gitHubRepoListStoryboard().gitHubRepoListVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'gitHubRepoListVC' could not be loaded from storyboard 'GitHubRepoListStoryboard' as 'GitHubRepoListVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
